{"ast":null,"code":"var _jsxFileName = \"/Users/chuongdan/Documents/code-quest/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { scrapeHtmlWeb } from \"scrape-html-web\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  useEffect(() => {\n    async function enterCodeforces() {\n      let base = \"https://codeforces.com\";\n      let cf_enter = base + \"/enter\";\n      const options = {\n        url: \"https://nodejs.org/en/blog/\",\n        bypassCors: true,\n        // avoids running errors in esm\n        mainSelector: \".blog-index\",\n        childrenSelector: [{\n          key: \"date\",\n          selector: \"time\",\n          type: \"text\"\n        },\n        // by default, the first option that is taken into consideration is att\n        {\n          key: \"version\",\n          selector: \"a\",\n          type: \"text\"\n        }, {\n          key: \"link\",\n          selector: \"a\",\n          attr: \"href\"\n        }]\n      };\n      const data = await scrapeHtmlWeb({\n        url: cf_enter,\n        bypassCors: true,\n        mainSelector: \".head\",\n        childrenSelector: [{\n          key: \"data\",\n          selector: \"meta\"\n        }]\n      });\n      console.log(data);\n    }\n    enterCodeforces();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"main\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 10\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","scrapeHtmlWeb","jsxDEV","_jsxDEV","App","_s","enterCodeforces","base","cf_enter","options","url","bypassCors","mainSelector","childrenSelector","key","selector","type","attr","data","console","log","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/chuongdan/Documents/code-quest/src/App.tsx"],"sourcesContent":["import { useEffect } from \"react\";\n\nimport { scrapeHtmlWeb } from \"scrape-html-web\";\n\nfunction App() {\n  useEffect(() => {\n    async function enterCodeforces() {\n      let base: string = \"https://codeforces.com\";\n      let cf_enter: string = base + \"/enter\";\n\n      const options = {\n        url: \"https://nodejs.org/en/blog/\",\n        bypassCors: true, // avoids running errors in esm\n        mainSelector: \".blog-index\",\n        childrenSelector: [\n          { key: \"date\", selector: \"time\", type: \"text\" },\n          // by default, the first option that is taken into consideration is att\n          { key: \"version\", selector: \"a\", type: \"text\" },\n          { key: \"link\", selector: \"a\", attr: \"href\" },\n        ],\n      };\n\n      const data = await scrapeHtmlWeb({\n        url: cf_enter,\n        bypassCors: true,\n        mainSelector: \".head\",\n        childrenSelector: [{ key: \"data\", selector: \"meta\" }],\n      });\n\n      console.log(data);\n    }\n    enterCodeforces();\n  }, []);\n\n  return <main></main>;\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,SAASC,aAAa,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACbL,SAAS,CAAC,MAAM;IACd,eAAeM,eAAeA,CAAA,EAAG;MAC/B,IAAIC,IAAY,GAAG,wBAAwB;MAC3C,IAAIC,QAAgB,GAAGD,IAAI,GAAG,QAAQ;MAEtC,MAAME,OAAO,GAAG;QACdC,GAAG,EAAE,6BAA6B;QAClCC,UAAU,EAAE,IAAI;QAAE;QAClBC,YAAY,EAAE,aAAa;QAC3BC,gBAAgB,EAAE,CAChB;UAAEC,GAAG,EAAE,MAAM;UAAEC,QAAQ,EAAE,MAAM;UAAEC,IAAI,EAAE;QAAO,CAAC;QAC/C;QACA;UAAEF,GAAG,EAAE,SAAS;UAAEC,QAAQ,EAAE,GAAG;UAAEC,IAAI,EAAE;QAAO,CAAC,EAC/C;UAAEF,GAAG,EAAE,MAAM;UAAEC,QAAQ,EAAE,GAAG;UAAEE,IAAI,EAAE;QAAO,CAAC;MAEhD,CAAC;MAED,MAAMC,IAAI,GAAG,MAAMjB,aAAa,CAAC;QAC/BS,GAAG,EAAEF,QAAQ;QACbG,UAAU,EAAE,IAAI;QAChBC,YAAY,EAAE,OAAO;QACrBC,gBAAgB,EAAE,CAAC;UAAEC,GAAG,EAAE,MAAM;UAAEC,QAAQ,EAAE;QAAO,CAAC;MACtD,CAAC,CAAC;MAEFI,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACnB;IACAZ,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOH,OAAA;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAY,CAAC;AACtB;AAACnB,EAAA,CA/BQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AAiCZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}