{"ast":null,"code":"import axios from \"axios\";\nimport * as cheerio from \"cheerio\";\nconst searchString = \"some search query\";\nconst AXIOS_OPTIONS = {\n  headers: {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36\"\n  },\n  params: {\n    q: `${searchString}`,\n    hl: \"en\",\n    gl: \"us\"\n  }\n};\nconst isTagElement = element => {\n  return (element === null || element === void 0 ? void 0 : element.attribs) !== undefined;\n};\nexport async function getCsrfToken() {\n  let base = \"https://codeforces.com\";\n  let cf_enter = base + \"/enter\";\n  let csrf_token = \"\";\n  const responseTest = await axios.get(cf_enter);\n  const selectorTest = cheerio.load(responseTest.data);\n  const rawData = selectorTest(\"head\").children(\"meta\");\n\n  // console.log(neededData);\n\n  const neededData = rawData.toArray();\n  for (let i = 0; i < neededData.length; i++) {\n    const dataI = neededData[i];\n    if (isTagElement(dataI) && dataI.attribs.name !== undefined && dataI.attribs.content !== undefined && dataI.attribs.name === \"X-Csrf-Token\") {\n      csrf_token = dataI.attribs.content;\n    }\n  }\n  return csrf_token;\n}","map":{"version":3,"names":["axios","cheerio","searchString","AXIOS_OPTIONS","headers","params","q","hl","gl","isTagElement","element","attribs","undefined","getCsrfToken","base","cf_enter","csrf_token","responseTest","get","selectorTest","load","data","rawData","children","neededData","toArray","i","length","dataI","name","content"],"sources":["/Users/chuongdan/Documents/code-quest/src/util/http.ts"],"sourcesContent":["import axios from \"axios\";\nimport * as cheerio from \"cheerio\";\n\nconst searchString = \"some search query\";\n\nconst AXIOS_OPTIONS = {\n  headers: {\n    \"User-Agent\":\n      \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36\",\n  },\n  params: { q: `${searchString}`, hl: \"en\", gl: \"us\" },\n};\n\nconst isTagElement = (element: any): element is cheerio.TagElement => {\n  return element?.attribs !== undefined;\n};\n\nexport async function getCsrfToken() {\n  let base: string = \"https://codeforces.com\";\n  let cf_enter: string = base + \"/enter\";\n\n  let csrf_token: string = \"\";\n\n  const responseTest = await axios.get(cf_enter);\n  const selectorTest = cheerio.load(responseTest.data);\n  const rawData = selectorTest(\"head\").children(\"meta\");\n\n  // console.log(neededData);\n\n  const neededData: cheerio.Element[] = rawData.toArray();\n\n  for (let i: number = 0; i < neededData.length; i++) {\n    const dataI: cheerio.Element = neededData[i];\n    if (\n      isTagElement(dataI) &&\n      dataI.attribs.name !== undefined &&\n      dataI.attribs.content !== undefined &&\n      dataI.attribs.name === \"X-Csrf-Token\"\n    ) {\n      csrf_token = dataI.attribs.content;\n    }\n  }\n\n  return csrf_token;\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,OAAO,MAAM,SAAS;AAElC,MAAMC,YAAY,GAAG,mBAAmB;AAExC,MAAMC,aAAa,GAAG;EACpBC,OAAO,EAAE;IACP,YAAY,EACV;EACJ,CAAC;EACDC,MAAM,EAAE;IAAEC,CAAC,EAAE,GAAGJ,YAAY,EAAE;IAAEK,EAAE,EAAE,IAAI;IAAEC,EAAE,EAAE;EAAK;AACrD,CAAC;AAED,MAAMC,YAAY,GAAIC,OAAY,IAAoC;EACpE,OAAO,CAAAA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,OAAO,MAAKC,SAAS;AACvC,CAAC;AAED,OAAO,eAAeC,YAAYA,CAAA,EAAG;EACnC,IAAIC,IAAY,GAAG,wBAAwB;EAC3C,IAAIC,QAAgB,GAAGD,IAAI,GAAG,QAAQ;EAEtC,IAAIE,UAAkB,GAAG,EAAE;EAE3B,MAAMC,YAAY,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAACH,QAAQ,CAAC;EAC9C,MAAMI,YAAY,GAAGlB,OAAO,CAACmB,IAAI,CAACH,YAAY,CAACI,IAAI,CAAC;EACpD,MAAMC,OAAO,GAAGH,YAAY,CAAC,MAAM,CAAC,CAACI,QAAQ,CAAC,MAAM,CAAC;;EAErD;;EAEA,MAAMC,UAA6B,GAAGF,OAAO,CAACG,OAAO,CAAC,CAAC;EAEvD,KAAK,IAAIC,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAGF,UAAU,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;IAClD,MAAME,KAAsB,GAAGJ,UAAU,CAACE,CAAC,CAAC;IAC5C,IACEjB,YAAY,CAACmB,KAAK,CAAC,IACnBA,KAAK,CAACjB,OAAO,CAACkB,IAAI,KAAKjB,SAAS,IAChCgB,KAAK,CAACjB,OAAO,CAACmB,OAAO,KAAKlB,SAAS,IACnCgB,KAAK,CAACjB,OAAO,CAACkB,IAAI,KAAK,cAAc,EACrC;MACAb,UAAU,GAAGY,KAAK,CAACjB,OAAO,CAACmB,OAAO;IACpC;EACF;EAEA,OAAOd,UAAU;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}